<%= form_for(@quotation, url: { action: "create", car_form_id: params[:car_form_id] }) do |f| %>
  <% if @quotation.errors.any? %>
    <div id="error_explanation">
      <h2><%= pluralize(@quotation.errors.count, "error") %> prohibited this quotation from being saved:</h2>
      <ul>
        <% @quotation.errors.full_messages.each do |message| %>
          <li><%= message %></li>
        <% end %>
      </ul>
    </div>
  <% end %>
<%# debugger %>
  <div class="box-body">
    <div class="row">
      <div class="form-group col-12 col-md-6">
        <label><%= t :choose_customer %></label>
        <%= f.text_field :customer, value: @car_form.email, class: "form-control rounded-field py-6", readonly: true, style: "width: 66%;" %>
      </div>

      <div class="form-group col-12 col-md-6">
        <label>Customer Email</label>
        <%= f.email_field :contact_email, value: @car_form.email, class: "form-control rounded-field", readonly: true, style: "width: 66%;" %>
      </div>

      <div class="form-group col-12 col-md-6">
        <label>Customer Phone</label>
        <%= f.phone_field :phone, value: @car_form.phone_number, class: "form-control rounded-field", readonly: true, style: "width: 66%;" %>
      </div>

      <div class="form-group col-12 col-md-6">
        <label>City</label>
        <%= f.text_field :city, value: @car_form.city, class: "form-control rounded-field", readonly: true, style: "width: 66%;" %>
      </div>
    </div>

    <div class="form-group">
      <label>Quotation Items</label>
			<table id="q-items">
				<thead>
				<tr>
					<th><%= t :item%></th>
          <th><%= t :description%></th>
					<th><%= t :quantity%></th>
					<th><%= t :unit_price%></th>
					<th><%= t :total_price%></th>
					<th><%= t :remove%></th>
				</tr>
			</thead>
        <tbody class="quotation_items">
          <%=f.fields_for :quotation_items do |quotation_item|%>
          <%= render 'quotation_item_fields', :f => quotation_item %>
          <%end%>
        </tbody>
      </table>
      <%= link_to_add_association 'add line', f, :quotation_items,  class: "btn btn-primary my-3", id:"add_line", data: {"association-insertion-node" => "tbody.quotation_items", "association-insertion-method" => "append"}%>

    <div class="form-group">
      <label>Discount</label>
      <%= f.text_field :discount, class: "form-control rounded-field my-3", pattern: "^[0-9]+([,.][0-9]+)?$", style: "width: 66%;" %>
    </div>

    <%# <div class="form-group">
      <label>External Comment</label> %>
      <%# f.text_area :external_comment, class: "form-control" %>
    <%# </div> %>

    <%# <div class="form-group"> %>
      <%# f.fields_for :comments, Comment.new do |comment| %>
        <%# render 'comments/form', :f => comment %>
      <%# end %>
    <%# </div> %>

    <%= f.hidden_field :car_form_id, value: params[:car_form_id] %>

    <div class="btn-group">
      <%= f.submit "Submit", class: "btn btn-primary" %>
    </div>
  </div>
<% end %>

<script type="text/javascript">

var price = [];
var quantity = [];
var cell = [];
var total = 0.0;
var rowc = 0;

$('table tr:not(:first-child)').each(function(i, row) {
    price.push($(row).find('td').next("td").find("input"));
});

$('#add_line').click(function() {
    mutationObserver.observe(document.documentElement, {
        attributes: true,
        characterData: true,
        childList: true,
        subtree: true,
        childList: true,
    });
});

function calculate_total(price, quantity, cell) {
    var func = [];

    function createfunc(x) {
        price[x].on('change', function() {
            get_total();
        });
    }

    for (var x = 0; x < price.length; x++) {
        createfunc(x);
    }

    function get_total() {
        total = 0.0;
        for (var x = 0; x < price.length; x++) {
            total += parseFloat(price[x].val());
            $('#total_price').val(total);
        }
    }
}

var mutationObserver = new MutationObserver(function(mutations) {
    mutations.forEach(function(mutation) {
        price.push($('table tr:last-child td').next("td").find("input"));
        calculate_total(price, quantity, cell);
        mutationObserver.disconnect();
    });
});

// Initial calculation on document ready
calculate_total(price, quantity, cell);

</script>
